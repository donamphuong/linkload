#!/usr/bin/ruby

#include the tuple class
load 'tuple.rb'

$ignore = (`git ls-files --others`).split('\n')
#a hash that maps a file to tuple that store a commit's information
$map = Hash.new
#an array that stores the time
$time = Array.new
#the longest word in maps
$longest = 0

#if ignore is 1 then ignore all git files
def traverse(start)
  if Dir.exist?(start)
    Dir.foreach(start) do |x|
      path = File.join(start, x)
      #puts x

      if(x == '.' || x == '..')
        next
      elsif File.file?(path) && File.readable?(x)
        if (!$ignore.include? "#{x}\n")
           Dir.chdir(start)
  	   $longest = $longest < x.length ? x.length : $longest
           parse(x)
        else
          puts "[***not under version control***]: #{x}"
        end
      else
        traverse(path)
      end
    end
  end
end

def parse(file)
  info = Tuple.new
  info.changeDate(`git log -1 --pretty=format:%cI #{file}`)
  info.changeAuthor(`git log -1 --pretty=format:%an #{file}`)
  info.changeCommit(`git log -1 --pretty=format:%h #{file}`[0, 4])

  $time.push(info.getDate)
  $map.store(file, info)
end

#print hash
def print_hash
    $time.sort!.uniq!
    $time.reverse!

    $time.each do |date|
      $map.each do |file, tuple|
        if tuple.getDate.eql? date
          puts "#{date} [#{tuple.getCommit}]: #{file}" +
                " " * ($longest - file.length + 1) +
                "(#{tuple.getAuthor})"
        end
      end
    end
end

target_path = Dir.pwd
if !ARGV.empty?
  target_path = target_path + "/" + ARGV[0]
end

if(ARGV.length > 1 || !Dir.exist?(target_path))
  puts "Invalid path"
  exit 1
else
  traverse(target_path)
  print_hash
end
